Virtual PIDs:
-------------
Each process in the test has a virtual PID. The main process is called 0.
Each process is given a virtual PID according to when it was created.
The second process will be called 1, the third will be called 2, etc...
In the tests, if you would like to get a tag of the fifth process created, you
would write:
GET_TAG 4
Another special process is the python tester, which is called -1 (you might see
it in the output of GET_GOOD_PROCESSES, but you should never call it).

Process Hierarchy:
------------------
To issue a command to the main process, simply write a command such as:
MAKE_GOOD_PROCESSES
To issue a command to the first son of the main process:
0 MAKE_GOOD_PROCESSES
And to the second son of the first son of the main process:
0/1 MAKE_GOOD_PROCESSES
Child numbering starts from zero.

Commands:
---------
CREATE_CHILD               :
This command creates a child for the given process hierarchy.
For example:
2/1 CREATE_CHILD
Creates a child for the second son of the third son of the main process.

GET_TAG <VPID>             :
This command returns the tag of the specified process' VIRTUAL PID.
For example:
2 GET_TAG 5
Asks the third child of the main process to get the tag of the 6th process.

SET_TAG <VPID> <TAG>       :
This command set the tag of the specified process VIRTUAL PID to be TAG.
For example:
1/3 SET_TAG 5 100
Asks the fourth child of the second child of the main process to set the tag of
process number 6 to be 100
If the operation cannot be done, the return code is -ERRNO.

GET_GOOD_PROCESSES <COUNT> :
This command gets good process lists of maximum count size.
For example:
1/1 GET_GOOD_PROCESSES 10
Asks the second child of the second child of the main process to get good
processes, with a maximum array size of 10

MAKE_GOOD_PROCESSES        :
Makes good processes for the given process and up.
For example:
2 MAKE_GOOD_PROCESSES
Asks the third child of the main process to make good processes.

CLOSE                      :
At the end of each file, CLOSE shuts down all processes recursively.
